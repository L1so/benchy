#!/usr/bin/env bash
# Benchy V1.0
# Heavily influenced by masonr's Yet-Another-Bench-Script
# https://github.com/masonr/yet-another-bench-script

exec   > >(tee -ia $HOME/benchy.log)
exec  2> >(tee -ia $HOME/benchy.log >& 2)
exec 19> $HOME/benchy.log

export BASH_XTRACEFD="19"
set -x

currentDate=$(date +"%d %b %Y %H:%M %Z")
currentVersion="v1.0"
header_intro() {
  echo -e '# # # # # # # # # # # # # # # # # # #'
  echo -e "#            Benchy $currentVersion            #"
  echo -e '#   https://github.com/L1so/benchy  #'
  echo -e '#        AIO Benchmarking tool      #'
  echo -e '# # # # # # # # # # # # # # # # # # #'
  echo -e "#       $currentDate       #"
  echo -e '# # # # # # # # # # # # # # # # # # #'
  echo
}
display_help() {
  cat <<'EOT'
Usage: benchy [options]
Options:
  -t, --temp-file         Remove benchy dependencies after run (default: keep storing)
  -n, --skip-network      Skip iperf3 network measurement test
  -d, --skip-disk         Skip fio disk benchmark test
  -g, --skip-gb           Skip geekbench 5 test
  -h, --help              Display this help section
  -v, --version           Display version
EOT
}
# BEGIN OPTION PARSING (source https://stackoverflow.com/a/62616466/12289283)
usage_error () { printf "%s\n%s\n" "$1" "Try 'benchy --help' to view available option" >&2; exit 2; }
endofline=$(echo '\01\03\03\07')
if [ "$#" != 0 ]; then
  set -- "$@" "$endofline"
  while [ "$1" != "$endofline" ]; do
    opt="$1"; shift
    case "$opt" in
      -t|--temp-file) arg_temp_file="true";;
      -n|--skip-network) arg_skip_network="true";;
      -d|--skip-disk) arg_skip_disk="true";;
      -g|--skip-gb) arg_skip_gb="true";;
      -h|--help) display_help; exit 0;;
      -v|--version) printf "%s\n" "$currentVersion"; exit 0;;
      -|''|[^-]*) set -- "$@" "$opt";;
      -[^-]?*)    set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;
      --)         while [ "$1" != "$endofline" ]; do set -- "$@" "$1"; shift; done;;
      -*)         usage_error "Unknown option: '$opt'";;
      *)          exit 2;;
    esac
  done
  shift
fi
# END OPTION PARSING

convertsize() {
  local i=${1:-0} d="" s=0 S=("KiB" "MiB" "GiB" "TiB" "PiB" "EiB" "YiB" "ZiB")
  while ((i > 1024 && s < ${#S[@]}-1)); do
      printf -v d ".%02d" $((i % 1024 * 100 / 1024))
      i=$((i / 1024))
      s=$((s + 1))
  done
  echo "$i$d ${S[$s]}"
}
format_disk() {
  local i=${1:-0} d="" s=0 S=("KB/s" "MB/s" "GB/s")
  while ((i > 1000 && s < ${#S[@]}-1)); do
      printf -v d ".%02d" $((i % 1000 * 100 / 1000))
      i=$((i / 1000))
      s=$((s + 1))
  done
  echo "$i$d ${S[$s]}"
}

overline() {
  printf "\r%s" "$(tput el)"
}

cleanup() {
  tput cnorm
}
trap cleanup 0 2 3 15

file_grabber() {
  ddl_input="$1"
  if [ "$filegrab" -eq 0 ]; then
    case "$ddl_input" in
      *cdn.geekbench.com*) _curl_opt="-kL --progress-bar";;
      *ipv*) _curl_opt="-s --connect-timeout 1 --max-time 1";;
      *) _curl_opt="-kLs --connect-timeout 5 --retry 5 --retry-delay 0 -o $2";;
    esac
    curl $_curl_opt $ddl_input
  elif [ "$filegrab" -eq 1 ]; then
    case "$ddl_input" in
      *cdn.geekbench.com*)
      { wget --help | grep -q '\--show-progress'; } && _wget_opt="-qO- --show-progress --progress=bar:force" || _wget_opt="-qO-"
      ;;
      *ipv*) _wget_opt="--timeout=1 --tries=1 --quiet";;
      *) _wget_opt="-q -O $2";;
    esac
    wget $_wget_opt $ddl_input
  fi
}

gb_string() {
  if [ "$gb_version" -eq 5 ]; then
    awk 'f{if ($0=="</div>") exit; print} $0=="<div class=\047platform\047>"{f=1}' "$1"
  else
    awk -F[\<\>] '/colspan=\0472\047/{ print $3 }' "$1"
  fi
}

binarycheck() {
  # Building directory
  benchy_path=$HOME/.benchy_file
  fio_path=$benchy_path/fio
  iperf_path=$benchy_path/iperf3
  screen_path=$benchy_path/screen
  geekbench_path="${benchy_path}/gb${gb_version}"
  bc_path=$benchy_path/bc
  country_code=$benchy_path/country.txt
  country_json=$benchy_path/country.json

  # Fio binary
  command -v fio >/dev/null 2>&1 && fio="fio" || fio="$fio_path/fio"
  # Iperf binary
  command -v iperf3 >/dev/null 2>&1 && iperf="iperf3" || iperf="$iperf_path/iperf3"
  # Screen binary
  command -v screen >/dev/null 2>&1 && screen="screen" || screen="$screen_path/screen"
  # bc binary
  command -v bc >/dev/null 2>&1 && bc="bc" || bc="$bc_path/bc"

  # Prioritize curl over wget
  if command -v curl >/dev/null 2>&1; then
    # 0 Implies curl
    filegrab=0
  elif command -v wget >/dev/null 2>&1; then
    # 1 Implies wget
    filegrab=1
  else
    printf "%s\n" "Neither wget nor curl is exist" "Please install it first" >&2
    exit 1
  fi

  if [ ! -d "$benchy_path" ]; then
    #printf "%s" "Creating $benchy_path, all benchy related file will be stored in here..."
    [ ! -d "$benchy_path" ] && mkdir -p $benchy_path
    [ ! -d "$fio_path" ] && mkdir -p $fio_path
    [ ! -d "$iperf_path" ] && mkdir -p $iperf_path
    [ ! -d "$screen_path" ] && mkdir -p $screen_path
    [ ! -d "$geekbench_path" ] && mkdir -p $geekbench_path
    [ ! -d "$bc_path" ] && mkdir -p $bc_path
    #printf "\r%s" "$(tput el)"

    printf "%s" "Downloading required asset, please wait a moment..."
    # gitlink="https://github.com/L1so/benchy/raw/main/binary"

    # Country code
    file_grabber "ipinfo.io/country" $country_code
    # Country.json
    file_grabber "https://gist.githubusercontent.com/L1so/f1a14c996770be45fed8d24bf8b6f11f/raw" $country_json

    # Download fio if not exist
    if [ "$fio" != "fio" ] && [ ! -f "$fio_path/fio" ]; then
      file_grabber "https://www.dropbox.com/s/0ay9ftavvwzmapr/fio_${arch}" "$fio_path/fio"
      [ $? -eq 0 ] && chmod u+x $fio_path/fio
    fi

    # Download iperf3 if not exist
    if [ "$iperf" != "iperf3" ] && [ ! -f "$iperf_path/iperf3" ]; then
      file_grabber "https://www.dropbox.com/s/lsnmt9uvjghmksz/iperf3_${arch}" "$iperf_path/iperf3"
      [ $? -eq 0 ] && chmod u+x $iperf_path/iperf3
    fi

    # Download screen if not exist
    if [ "$screen" != "screen" ] && [ ! -f "$screen_path/screen" ]; then
      file_grabber "https://www.dropbox.com/s/ysd46guir0bxi8g/screen_${arch}" "$screen_path/screen"
      [ $? -eq 0 ] && chmod u+x $screen_path/screen
    fi

    # Download bc if not exist
    if [ "$bc" != "bc" ] && [ ! -f "$bc_path/bc" ]; then
      file_grabber "https://www.dropbox.com/s/bo51a1qnr881wvk/bc_${arch}" "$bc_path/bc"
      [ $? -eq 0 ] && chmod u+x $bc_path/bc
    fi
    overline
  fi
}

user_arch() {
  # Determine what type of architecture this server runs off
  # Most commonly would be 64 bit
  arch=$(uname -m)
  case "$arch" in
    *x86_64*)
    arch="x64"
    fio_size="2G"
    gb_version=5
    gb_arch="x86_64"
    gb_ddl_link="https://cdn.geekbench.com/Geekbench-5.4.4-Linux.tar.gz"
    ;;
    *i?86*)
    arch="x86"
    fio_size="2G"
    gb_version=4
    gb_arch="x86_32"
    gb_ddl_link="https://cdn.geekbench.com/Geekbench-4.3.3-Linux.tar.gz"
    ;;
    *arm*|*aarch*)
    if [ "$(getconf LONG_BIT)" = *"64"* ]; then
      arch="aarch64"
    else
      arch="arm"
    fi
    fio_size="512M"
    gb_version=5
    gb_ddl_link="https://cdn.geekbench.com/Geekbench-5.4.4-LinuxARMPreview.tar.gz"
    gb_arch=$gb_version
    printf "ARM based device is not *officially supported*, use with caution.\n"
    ;;
    *) printf "Architecture not found\n"; exit 1;;
  esac
}

sysinfo() {
  # System Information
  # OS
  . "/etc/lsb-release"
  local currentOS="${DISTRIB_DESCRIPTION}"
  # Uptime
  local uptime_now=$(awk '{print int($1/86400)" Days, "int($1%86400/3600)" Hours, "int(($1%3600)/60)" Minute, "int($1%60)" Seconds "}' /proc/uptime)
  # Location
  local country=$(grep -Po '"'"$(cat $country_code)"'"\s*:\s*"\K([^"]*)' "$country_json")
  # IPv4 check
  file_grabber "ipv4.icanhazip.com" >/dev/null 2>&1 && ipv4_status="\xE2\x9C\x94 Enabled" || ipv4_status="\xE2\x9D\x8C Disabled"
  # IPv6 check
  file_grabber "ipv6.icanhazip.com" >/dev/null 2>&1 && ipv6_status="\xE2\x9C\x94 Enabled" || ipv6_status="\xE2\x9D\x8C Disabled"

  # Processor information
  local cpu_model=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
  local cpu_core=$(awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo)
  local cpu_freq=$(awk -F: ' /cpu MHz/ {freq=$2} END {print freq " MHz"}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
  grep -q -m 1 aes /proc/cpuinfo && local cpu_aes="\xE2\x9C\x94 Enabled" || local cpu_aes="\xE2\x9D\x8C Disabled"
  grep -q -m 1 'vmx\|svm' /proc/cpuinfo && local cpu_virt="\xE2\x9C\x94 Enabled" || local cpu_virt="\xE2\x9D\x8C Disabled"
  local virt_type=$(hostnamectl | grep -oP '(?<=Virtualization: ).*')
  local virt_type="${virt_type:-No virt detected}"

  # Disk & Memory Usage
  local df_output=$(df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs -t swap)
  local disk_info=$(convertsize $(echo "$df_output" | awk 'NR==2{ print $2 }'))
  local disk_usage=$(convertsize $(echo "$df_output" | awk 'NR==2{ print $3 }'))
  local disk_percentage=$(echo "$df_output" | awk 'NR==2{ print $5 }')

  local mem_info=$(convertsize $(awk -F":" '$1~/MemTotal/{print $2}' /proc/meminfo))
  local mem_usage=$(free -m | awk 'NR==2{printf "%s MB (%.0f%% Used)\n", $3,$3*100/$2 }')
  local swap_info=$(convertsize $(free | awk '/Swap/ {print $2}'))

  # Printing the output: System Information
  printf "System Information\n"; printf '%.1s' -{1..21} $'\n'
  printf "%-11s : %-10b\n" "OS" "$currentOS" "Uptime" "$uptime_now" "Location" "$country" "IPv4" "$ipv4_status" "IPv6" "$ipv6_status"
  echo -e

  # Printing the output: Processor Information
  printf "Processor Information\n"; printf '%.1s' -{1..21} $'\n'
  printf "%-11s : %-10b\n" "Model" "$cpu_model" "Core" "$cpu_core @ $cpu_freq" "AES-NI" "$cpu_aes" "VM-x/AMD-V" "$cpu_virt" "Virt" "$virt_type"
  echo -e

  # Printing the output: Disk & Memory Usage
  printf "Disk & Memory Usage\n"; printf '%.1s' -{1..21} $'\n'
  printf "%-11s : %-10b\n" "Disk" "$disk_info" "Disk Usage" "$disk_usage ($disk_percentage Used)" "Mem" "$mem_info" \
  "Mem Usage" "$mem_usage" "Swap" "$swap_info"
  echo
}
disk_test() {
  printf "Generating fio test file..."
  $fio --name=setup --ioengine=libaio --rw=read --bs=64k --iodepth=64 --numjobs=2 --size=$fio_size --runtime=1 --gtod_reduce=1 --filename=$fio_path/test.fio \
  --direct=1 --minimal >/dev/null 2>&1
  overline

  # Run fio on each block size enclosed in array
  block_sizes=( "4k" "64k" "512k" "1m" )
  for bs in "${block_sizes[@]}"; do
    # Iterate over each defined block_size from array
    printf "%s" "Running fio R+W sampling on $bs block size..."
    fioutput=$(
    timeout 35 \
    $fio --name=rand_rw_$bs \
    --ioengine=libaio \
    --rw=randrw \
    --rwmixread=50 \
    --bs=$bs \
    --iodepth=64 \
    --numjobs=2 \
    --size=$fio_size \
    --runtime=30 \
    --gtod_reduce=1 \
    --direct=1 \
    --filename=$fio_path/test.fio \
    --group_reporting \
    --minimal 2> /dev/null
    )
    [ "$?" -ne 0 ] && \
    fio_result+=( "Failed" "To" "Bench" "Disk" "Please" "Retry" ) && \
    continue

    fio_iops_read=$(echo "$fioutput" | cut -d';' -f8)
    fio_iops_write=$(echo "$fioutput" | cut -d';' -f49)
    fio_iops=$(printf "%.1fk" "$(echo "scale=2 ; ($fio_iops_read + $fio_iops_write) / 1000" | $bc)")
    fio_iops_read=$(printf "%.1fk" "$(echo "scale=2 ; $fio_iops_read/ 1000" | $bc)")
    fio_iops_write=$(printf "%.1fk" "$(echo "scale=2 ; $fio_iops_write/ 1000" | $bc)")

    fio_test_read=$(echo "$fioutput" | cut -d';' -f7)
    fio_test_write=$(echo "$fioutput" | cut -d';' -f48)
    fio_test=$(format_disk $(echo "($fio_test_read + $fio_test_write)" | $bc))
    fio_test_read=$(format_disk $fio_test_read)
    fio_test_write=$(format_disk $fio_test_write)

    fio_result+=( "$fio_test_read" "$fio_test_write" "$fio_test" "$fio_iops_read" "$fio_iops_write" "$fio_iops" )
    overline
  done
}

disk_check() {
  [ "$arg_skip_disk" = "true" ] && return 1
  # Check storage space eligibility
  disk_storage=$(df -k . | awk 'NR==2 { print $4 }')
  case "$arch" in
     *arm*|*aarch*)
     if [ "$disk_storage" -lt "512000" ]; then
       printf "Your disk space is less than 512 MB. Will pass the disk test...\n"
       return 1
     fi
     ;;
     *)
     if [ "$disk_storage" -lt "2097152" ]; then
       printf "Your disk space is less than 2 GB. Will pass the disk test...\n"
       return 1
     fi
     ;;
  esac
}
output_disk_test() {
  printf "Disk Performance Check (50/50 R/W):\n"
  # Build output
  printf "+%75s+\n" | tr ' ' '-'
  printf "| %-3s | %-11s | %-11s | %-11s | %18s %7s\n" "Size" "Read" "Write" "Total" "IOPS (R,W,T)" "|"
  printf "+%75s+\n" | tr ' ' '='
  # 4k
  printf "| %-4s | %-11s | %-11s | %-11s | %-6s | %-6s | %-6s |\n" "4k" "${fio_result[0]}" "${fio_result[1]}" "${fio_result[2]}" "${fio_result[3]}" "${fio_result[4]}" "${fio_result[5]}"
  printf "+%75s+\n" | tr ' ' '-'
  # 64k
  printf "| %-4s | %-11s | %-11s | %-11s | %-6s | %-6s | %-6s |\n" "64k" "${fio_result[6]}" "${fio_result[7]}" "${fio_result[8]}" "${fio_result[9]}" "${fio_result[10]}" "${fio_result[11]}"
  printf "+%75s+\n" | tr ' ' '-'
  # 512k
  printf "| %-4s | %-11s | %-11s | %-11s | %-6s | %-6s | %-6s |\n" "512k" "${fio_result[12]}" "${fio_result[13]}" "${fio_result[14]}" "${fio_result[15]}" "${fio_result[16]}" "${fio_result[17]}"
  printf "+%75s+\n" | tr ' ' '-'
  # 1M
  printf "| %-4s | %-11s | %-11s | %-11s | %-6s | %-6s | %-6s |\n" "1m" "${fio_result[18]}" "${fio_result[19]}" "${fio_result[20]}" "${fio_result[21]}" "${fio_result[22]}" "${fio_result[23]}"
  printf "+%75s+\n" | tr ' ' '-'
  echo
}

iperflist() {
  # iperf3 ipv4 provider list
  ipv4_provider=$(cat << 'EOF'
Clouvider|London, UK|5200-5209|lon.speedtest.clouvider.net
Online.net|Paris, France|5200-5209|ping.online.net
WebHorizon|Singapore|9201-9205|iperf.sgp.webhorizon.in
EOF
)
  # iperf3 ipv6 provider list
  ipv6_provider=$(cat << 'EOF'
Clouvider|London, UK|5200-5209|lon.speedtest.clouvider.net
Online.net|Paris, France|5200-5209|ping6.online.net
WebHorizon|Singapore|9201-9205|iperf.sgp.webhorizon.in
EOF
)
}

runiperf() {
  # Define argument
  local run_url="$1"
  local run_port="$2"
  local run_host="$3"
  local run_flags="$4"
  local iperflog

  # Send test 5 times
  for (( i = 1; i <= 5; i++ )); do
    printf "%s" "Performing iperf3 send test to $run_host (Attempt #$i of 5)"
    local vport=$(shuf -i $run_port -n 1)
    iperflog=$(timeout 15 $iperf $run_flags -c $run_url -p $vport -P 6 2>/dev/null)
    if [ "$?" -eq 0 ]; then
      send_speed=$(echo "$iperflog" | awk '/SUM/ && /sender/{ print $6, $7 }')
      sleep 1 && overline && break
    else
      sleep 3 && overline
    fi
  done
  # Receive test 5 times
  for (( i = 1; i <= 5; i++ )); do
    printf "%s" "Performing iperf3 receive test to $run_host (Attempt #$i of 5)"
    local vport=$(shuf -i $run_port -n 1)
    iperflog=$(timeout 15 $iperf $run_flags -c $run_url -p $vport -P 6 -R 2>/dev/null)
    if [ "$?" -eq 0 ]; then
      rec_speed=$(echo "$iperflog" | awk '/SUM/ && /receiver/{ print $6, $7 }')
      sleep 1 && overline && break
    else
      sleep 3 && overline
    fi
  done
}

parse_iperf() {
  [ "$arg_skip_network" = "true" ] && return 1
  iperflist
  case "$1" in
    *v4*)
    # Internet Protocol Version 4 (IPv4) test
    case "$ipv4_status" in
      *Enabled*)
      local iperf_flags="-4"
      printf "Network Performance Test (IPv4):\n"
      printf "+%75s+\n" | tr ' ' '-'
      printf "| %-12s | %-22s | %-15s | %-15s |\n" "Provider" "Location" "Send" "Receive"
      printf "+%75s+\n" | tr ' ' '='
      echo "$ipv4_provider" |
      {
        while IFS='|' read -r provider loc port url; do
          runiperf $url $port $provider $iperf_flags
          case "$send_speed" in
            ""|*0.00*) send_speed="busy";;
          esac
          case "$rec_speed" in
            ""|*0.00*) rec_speed="busy";;
          esac
          printf "| %-12s | %-22s | %-15s | %-15s |\n" "$provider" "$loc" "$send_speed" "$rec_speed"
          printf "+%75s+\n" | tr ' ' '-'
          unset send_speed rec_speed
        done
      }
      ;;
      *) return 1;;
    esac
      ;;
    *v6*)
    # Internet Protocol Version 6 (IPv6) test
    case "$ipv6_status" in
      *Enabled*)
      local iperf_flags="-6"
      printf "Network Performance Test (IPv6):\n"
      printf "+%75s+\n" | tr ' ' '-'
      printf "| %-12s | %-22s | %-15s | %-15s |\n" "Provider" "Location" "Send" "Receive"
      printf "+%75s+\n" | tr ' ' '='
      echo "$ipv6_provider" |
      {
        while IFS='|' read -r provider loc port url; do
          runiperf $url $port $provider $iperf_flags
          case "$send_speed" in
            ""|*0.00*) send_speed="busy";;
          esac
          case "$rec_speed" in
            ""|*0.00*) rec_speed="busy";;
          esac
          printf "| %-12s | %-22s | %-15s | %-15s |\n" "$provider" "$loc" "$send_speed" "$rec_speed"
          printf "+%75s+\n" | tr ' ' '-'
          unset send_speed rec_speed
        done
      }
      ;;
      *) return 1;;
    esac
      ;;
  esac
}
geekbench_test() {
  # Skip geekbench on input argument
  [ "$arg_skip_gb" = "true" ] && return 1
  if [ "$gb_version" -eq 5 ]; then
    # Geekbench 5
    if [ ! -f "$geekbench_path/geekbench5" ]; then
      printf "%s" "Downloading Geekbench 5, this may take a several minute..."
      file_grabber $gb_ddl_link | tar xzf - --strip-components=1 -C $geekbench_path \
      && printf "\r%s" "$(tput cuu 2 && tput ed)"
    fi
    # Perform geekbench 5 test
    printf "%s" "Initializing geekbench 5 test..."
    gb_output=$($geekbench_path/geekbench5 --upload 2>/dev/null | grep -m 1 "https://browser")
    gb_var="div"
    overline
  elif [ "$gb_version" -eq 4 ]; then
    # Geekbench 4
    if [ ! -f "$geekbench_path/geekbench4" ]; then
      printf "%s\n" "Downloading Geekbench 4, this may take a several minute..."
      file_grabber $gb_ddl_link | tar xzf - --strip-components=1 -C $geekbench_path \
      && printf "\r%s" "$(tput cuu 2 && tput ed)"
    fi
    # Perform geekbench 4 test
    printf "%s" "Initializing geekbench 4 test..."
    gb_output=$($geekbench_path/geekbench_${gb_arch} --upload 2>/dev/null | grep -m 1 "https://browser")
    gb_var="span"
    overline
  fi
  # Parsing result
  if [ -n "$gb_output" ]; then
    gb_output="${gb_output#"${gb_output%%[![:space:]]*}"}" # Remove whitespace
    gb_output="${gb_output%"${gb_output##*[![:space:]]}"}" # Remove whitespace
    gbfile="$benchy_path/temp_gb${gb_version}.log"
    file_grabber $gb_output $gbfile
    gb_single_core=$(awk -F "<${gb_var}[^>]*>(<d>)?|(</?d>)?</${gb_var}>" '$2~/[0-9]/{print $2}' "$gbfile" | awk 'FNR==1')
    gb_multi_core=$(awk -F "<${gb_var}[^>]*>(<d>)?|(</?d>)?</${gb_var}>" '$2~/[0-9]/{print $2}' "$gbfile" | awk 'FNR==2')
    gb_string=$(gb_string "$gbfile")
    printf "+%47s+\n" | tr ' ' '-'
    printf "| %-32s |\n" "$gb_string"
    printf "+%47s+\n" | tr ' ' '='
    printf "| %-25s | %-17s |\n" "Type of Test" "Score"
    printf "+%47s+\n" | tr ' ' '='
    printf "| %-25s | %-17s |\n" "Single Core" "$gb_single_core"
    printf "+%47s+\n" | tr ' ' '-'
    printf "| %-25s | %-17s |\n" "Multi Core" "$gb_multi_core"
    printf "+%47s+\n" | tr ' ' '-'
    printf "| %-32s |\n" "$gb_output"
    printf "+%47s+\n" | tr ' ' '-'
    rm -f "$gbfile"
  else
    printf "%s\n" "Geekbench $gb_version run failed, please retry again"
    return 1
  fi
}

main() {
  tput civis
  header_intro
  user_arch
  binarycheck
  sysinfo
  if disk_check; then
    # Disk check passed
    if disk_test; then
      # Disk test passed
      output_disk_test
    fi
  fi
  parse_iperf ipv4 && echo
  parse_iperf ipv6 && echo
  geekbench_test
  [ "$arg_temp_file" = "true" ] && rm -fr -- "$benchy_path"
}
main
