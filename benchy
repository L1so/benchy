#!/bin/sh
# Benchy V1.3
# Heavily influenced by masonr's Yet-Another-Bench-Script
# https://github.com/masonr/yet-another-bench-script
# shellcheck disable=SC2183,SC2030,SC2086,SC2181,SC2031
currentVersion="v1.3"
header_intro() {
  currentDate=$(date +"%d %b %Y %H:%M %Z")
  echo '# # # # # # # # # # # # # # # # # # #'
  echo "#            Benchy $currentVersion            #"
  echo '#   https://github.com/L1so/benchy  #'
  echo '#        AIO Benchmarking tool      #'
  echo '# # # # # # # # # # # # # # # # # # #'
  echo "#       $currentDate       #"
  echo '# # # # # # # # # # # # # # # # # # #'
  echo
}

display_help() {
  cat <<'EOT'
Usage: benchy [options]
Options:
  -t, --temp-file         Remove benchy dependencies after run (default: keep storing)
  -n, --skip-network      Skip iperf3 network measurement test
  -d, --skip-disk         Skip fio disk benchmark test
  -g, --skip-gb           Skip geekbench 5 test
  -i, --show-ip           Display server public IP address
  -l, --long-info         Display long complete output
  -p, --parse-only        Only parse basic information (equal to -ndg)
  -h, --help              Display this help section
  -v, --version           Display version
EOT
}
# BEGIN OPTION PARSING (source https://stackoverflow.com/a/62616466/12289283)
usage_error () { printf "%s\n%s\n" "$1" "Try 'benchy --help' to view available option" >&2; exit 2; }
endofline=$(echo '\01\03\03\07')
if [ "$#" != 0 ]; then
  set -- "$@" "$endofline"
  while [ "$1" != "$endofline" ]; do
    opt="$1"; shift
    case "$opt" in
      -t|--temp-file) arg_temp_file="true";;
      -n|--skip-network) arg_skip_network="true";;
      -d|--skip-disk) arg_skip_disk="true";;
      -g|--skip-gb) arg_skip_gb="true";;
      -i|--show-ip) arg_show_ip="true";;
      -l|--long-output) arg_long_output="true";;
      -p|--parse-only)
      arg_skip_network="true"
      arg_skip_disk="true"
      arg_skip_gb="true"
      ;;
      -h|--help) display_help; exit 0;;
      -v|--version) printf "%s\n" "$currentVersion"; exit 0;;
      -|''|[!-]*) set -- "$@" "$opt";;
      -[!-]?*)    set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;
      --)         while [ "$1" != "$endofline" ]; do set -- "$@" "$1"; shift; done;;
      -*)         usage_error "Unknown option: '$opt'";;
      *)          exit 2;;
    esac
  done
  shift
fi
# END OPTION PARSING

# Source https://gist.github.com/Akianonymus/25cfa570cb66821ab61846ceb0f9ca07
convertsize() {
    in=$(printf "%s" ${1:-0} | tr -d -c 0-9) sn=0
    dn='' typen=''
    while [ "${in}" -gt 1024 ]; do
        dn="$(printf ".%02d" $((in % 1024 * 100 / 1024)))"
        in=$((in / 1024)) && sn=$((sn += 1))
    done
    j=0 && for i in KiB MiB GiB TiB PiB EiB YiB ZiB; do
        j="$((j += 1))" && [ "$((j - 1))" = "${sn}" ] && typen="${i}" && break
        continue
    done
    printf "%s\n" "${in}${dn} ${typen}"
}

core_pkg() {
  command -v locale >/dev/null 2>&1 && export LC_ALL=$(locale -a|grep -ix 'c.utf-\?8' || echo C)
  for pkg in tput tar lsblk; do
    ! command -v $pkg >/dev/null 2>&1 && printf "%s\n" "$pkg missing from your system" && exit 1
  done
}

format_disk() {
    b_formatdisk=$(printf "%s" ${1:-0} | tr -d -c 0-9) s_formatdisk=0
    d_formatdisk='' type_formatdisk=''
    while [ "${b_formatdisk}" -gt 1024 ]; do
        d_formatdisk="$(printf ".%02d" $((b_formatdisk % 1024 * 100 / 1024)))"
        b_formatdisk=$((b_formatdisk / 1024)) && s_formatdisk=$((s_formatdisk += 1))
    done
    j=0 && for i in KB/s MB/s GB/s; do
        j="$((j += 1))" && [ "$((j - 1))" = "${s_formatdisk}" ] && type_formatdisk="${i}" && break
        continue
    done
    printf "%s\n" "${b_formatdisk}${d_formatdisk} ${type_formatdisk}"
}

overline() {
  printf "\r%s" "$(tput el)"
}

cleanup() {
  tput cnorm
}
trap cleanup 0 2 3 15

file_grabber() {
  ddl_input="$1"
  if [ "$filegrab" -eq 0 ]; then
    case "$ddl_input" in
      *cdn.geekbench.com*) _curl_opt="-L --progress-bar";;
      *ipv?.icanhazip.com*) _curl_opt="-s --connect-timeout 1 --max-time 1";;
      *) _curl_opt="-kLs --connect-timeout 5 --retry 5 --retry-delay 0 -o $2";;
    esac
    curl $_curl_opt $ddl_input
  elif [ "$filegrab" -eq 1 ]; then
    case "$ddl_input" in
      *cdn.geekbench.com*)
      { wget --help 2>&1 | grep -q -- '--show-progress'; } && _wget_opt="-qO- --show-progress --progress=bar:force" || _wget_opt="-qO-"
      ;;
      *ipv?.icanhazip.com*) _wget_opt="--timeout=1 --tries=1 --quiet";;
      *) _wget_opt="-q -O $2";;
    esac
    wget $_wget_opt $ddl_input
  fi
}
print_virtualization() {
  if command -v systemd-detect-virt >/dev/null 2>&1; then
    user_virt=$(systemd-detect-virt)
    if [ $? -eq 0 ]; then
      case "$user_virt" in
        *[Kk][Vv][Mm]*) echo "kvm"; return 0;;
        *[Oo]pen[Vv][Zz]*) echo "openvz"; return 0;;
        *[Ll][Xx][Cc]*) echo "lxc"; return 0;;
        *[Ww][Ss][Ll]*) echo "wsl"; return 0;;
        *) echo "none"
      esac
    fi
  fi
  if command -v dmidecode >/dev/null 2>&1; then
    user_virt=$(dmidecode -s system-product-name 2>/dev/null)
    if [ $? -eq 0 ]; then
      case "$user_virt" in
        *[Kk][Vv][Mm]*) echo "kvm"; return 0;;
        *[Oo]pen[Vv][Zz]*) echo "openvz"; return 0;;
        *[Ll][Xx][Cc]*) echo "lxc"; return 0;;
        *[Ww][Ss][Ll]*) echo "wsl"; return 0;;
        *) echo "none"
      esac
    fi
  fi
  # Fallback to manual test if none of the above working
  # Qemu test
  if ls -1 /dev/disk/by-id 2>/dev/null | grep -qiF qemu; then
    echo "qemu" && return 0
  fi
  # lxc test
  if grep -q lxc /proc/1/environ 2>/dev/null; then
    echo "lxc" && return 0
  fi
  # openvz test
  if [ -d "/proc/vz" ] && ! [ -d "/proc/bc" ]; then
    echo "openvz" && return 0
  fi
  # wsl test
  if grep -q Microsoft /proc/version; then
    echo "wsl" && return 0
  fi
}

gb_string() {
  if [ "$gb_version" -eq 5 ]; then
    awk 'f{if ($0=="</div>") exit; print} $0=="<div class=\047platform\047>"{f=1}' "$1"
  else
    awk -F[\<\>] '/colspan=\0472\047/{ print $3 }' "$1"
  fi
}

binarycheck() {
  # Building directory
  benchy_path=$HOME/.benchy_file
  fio_path=$benchy_path/fio
  iperf_path=$benchy_path/iperf3
  geekbench_path="${benchy_path}/gb${gb_version}"
  bc_path=$benchy_path/bc
  lsblk_path=$benchy_path/lsblk
  country_code=$benchy_path/country.txt
  country_json=$benchy_path/country.json

  # Fio binary
  command -v fio >/dev/null 2>&1 && fio="fio" || fio="$fio_path/fio"
  # Iperf binary
  command -v iperf3 >/dev/null 2>&1 && iperf="iperf3" || iperf="$iperf_path/iperf3"
  # bc binary
  command -v bc >/dev/null 2>&1 && bc="bc" || bc="$bc_path/bc"
  # lsblk binary (from util-linux) + check if -p option supported
  if command -v lsblk >/dev/null 2>&1; then
    if ! lsblk --help 2>&1 | grep -q -- '-p,'; then
      lsblk="$lsblk_path"
    else
      lsblk="lsblk"
    fi
  fi

  # Prioritize curl over wget
  if command -v curl >/dev/null 2>&1; then
    # 0 Implies curl
    filegrab=0
  elif command -v wget >/dev/null 2>&1; then
    # 1 Implies wget
    filegrab=1
  else
    printf "%s\n" "Neither wget nor curl is exist" "Please install it first" >&2
    exit 1
  fi

  # IPv4 address
  ipv4_address=$(file_grabber ipv4.icanhazip.com)
  [ $? -eq 0 ] && ipv4_status="true" || ipv4_status="false"

  # IPv6 address
  ipv6_address=$(file_grabber ipv6.icanhazip.com)
  [ $? -eq 0 ] && ipv6_status="true" || ipv6_status="false"

  if [ ! -d "$benchy_path" ]; then
    mkdir -p $benchy_path $geekbench_path

    printf "%s" "Downloading required asset, please wait a moment..."
    gitlink="https://github.com/L1so/benchy/raw/main/binary"

    # Country code
    file_grabber "ipinfo.io/country" $country_code
    # Country.json
    file_grabber "https://gist.githubusercontent.com/L1so/f1a14c996770be45fed8d24bf8b6f11f/raw" $country_json

    # Download fio if not exist
    if [ "$fio" != "fio" ] && [ ! -f "$fio_path/fio" ]; then
      mkdir -p $fio_path
      file_grabber "${gitlink}/fio/fio_${arch}" "$fio_path/fio"
      [ $? -eq 0 ] && chmod u+x $fio_path/fio
    fi

    # Download iperf3 if not exist
    if [ "$iperf" != "iperf3" ] && [ ! -f "$iperf_path/iperf3" ]; then
      mkdir -p $iperf_path
      file_grabber "${gitlink}/iperf3/iperf3_${arch}" "$iperf_path/iperf3"
      [ $? -eq 0 ] && chmod u+x $iperf_path/iperf3
    fi

    # Download bc if not exist
    if [ "$bc" != "bc" ] && [ ! -f "$bc_path/bc" ]; then
      mkdir -p $bc_path
      file_grabber "${gitlink}/bc/bc_${arch}" "$bc_path/bc"
      [ $? -eq 0 ] && chmod u+x $bc_path/bc
    fi

    # Download lsblk if not exist
    if [ "$lsblk" != "lsblk" ] && [ ! -f "$lsblk_path/lsblk" ]; then
      mkdir -p $lsblk_path
      file_grabber "${gitlink}/lsblk/lsblk_${arch}" "$lsblk_path/lsblk"
      [ $? -eq 0 ] && chmod u+x $lsblk_path/lsblk
    fi
    overline
  fi
}

user_arch() {
  # Determine what type of architecture this server runs off
  # Most commonly would be 64 bit
  arch=$(uname -m)
  case "$arch" in
    *x86_64*)
    arch="x64"
    fio_size="2G"
    gb_version=5
    gb_arch="x86_64"
    gb_ddl_link="https://cdn.geekbench.com/Geekbench-5.4.4-Linux.tar.gz"
    ;;
    *i?86*)
    arch="x86"
    fio_size="2G"
    gb_version=4
    gb_arch="x86_32"
    gb_ddl_link="https://cdn.geekbench.com/Geekbench-4.3.3-Linux.tar.gz"
    ;;
    *arm*|*aarch*)
    case "$(getconf LONG_BIT)" in
      *64*) arch="aarch64";;
      *) arch="arm";;
    esac
    fio_size="512M"
    gb_version=5
    gb_ddl_link="https://cdn.geekbench.com/Geekbench-5.4.4-LinuxARMPreview.tar.gz"
    gb_arch=$gb_version
    printf "ARM based device is not *officially supported*, use with caution.\n"
    ;;
    *) printf "Architecture not found\n"; exit 1;;
  esac
}

sysinfo() {
  # System Information
  # OS
  . "/etc/os-release"
  currentOS="${PRETTY_NAME}"
  checkmark=$(printf '\342\234\224')
  crossmark=$(printf '\342\235\214')
  # Uptime
  uptime_now=$(awk '{print int($1/86400)" Days, "int($1%86400/3600)" Hours, "int(($1%3600)/60)" Minute, "int($1%60)" Seconds "}' /proc/uptime)
  # Location
  country=$(grep -o '"'"$(cat $country_code)"'": *"[^"]*' "$country_json" | grep -o '[^"]*$')

  if [ "$arg_show_ip" = "true" ]; then
    # IPv4 check
    [ "$ipv4_status" = "true" ] && ipv4_string="$ipv4_address" || ipv4_string="$crossmark Disabled"
    [ "$ipv6_status" = "true" ] && ipv6_string="$ipv6_address" || ipv6_string="$crossmark Disabled"
  else
    # IPv6 check
    [ "$ipv4_status" = "true" ] && ipv4_string="$checkmark Enabled" || ipv4_string="$crossmark Disabled"
    [ "$ipv6_status" = "true" ] && ipv6_string="$checkmark Enabled" || ipv6_string="$crossmark Disabled"
  fi

  # Processor information
  cpu_model=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
  cpu_core=$(awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo)
  cpu_freq=$(awk -F: ' /cpu MHz/ {freq=$2} END {print freq " MHz"}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
  grep -q -m 1 aes /proc/cpuinfo && cpu_aes="$checkmark Enabled" || cpu_aes="$crossmark Disabled"
  grep -q -m 1 'vmx\|svm' /proc/cpuinfo && cpu_virt="$checkmark Enabled" || cpu_virt="$crossmark Disabled"
  virt_type="$(print_virtualization)"
  virt_type="${virt_type:-none}"

  # Disk & Memory Usage
  df_output=$(df -k /)
  disk_info=$(convertsize "$(echo "$df_output" | awk 'NR==2{ print $2 }')")
  disk_usage=$(convertsize "$(echo "$df_output" | awk 'NR==2{ print $3 }')")
  disk_percentage=$(echo "$df_output" | awk 'NR==2{ print $5 }')
  disk_partition=$(df -T . | awk '{ getline; print $1 }')
  disk_fstype=$(df -T . | awk '{ getline ; print $2 }')

  mem_info=$(convertsize "$(awk -F":" '$1~/MemTotal/{print $2}' /proc/meminfo)")
  mem_usage=$(free -m | awk 'NR==2{printf "%s MB (%.0f%% Used)\n", $3,$3*100/$2 }')
  swap_info=$(convertsize "$(free | awk '/Swap/ {print $2}')")

  if [ "$arg_long_output" = "true" ]; then
    # Printing the output: System Information
    printf "System Information\n"; printf "%21s\n" | tr ' ' '-'
    printf "%-11s : %-10s\n" "OS" "$currentOS" "Uptime" "$uptime_now" "Location" "$country" "IPv4" "$ipv4_string" "IPv6" "$ipv6_string"
    echo

    # Printing the output: Processor Information
    printf "Processor Information\n"; printf "%21s\n" | tr ' ' '-'
    printf "%-11s : %-10s\n" "Model" "$cpu_model" "Core" "$cpu_core @ $cpu_freq" "AES-NI" "$cpu_aes" "VM-x/AMD-V" "$cpu_virt" "Virt" "$virt_type"
    echo

    # Printing the output: Disk & Memory Usage
    printf "Disk & Memory Usage\n"; printf "%21s\n" | tr ' ' '-'
    printf "%-11s : %-10s\n" "Disk" "$disk_info" "Disk Usage" "$disk_usage ($disk_percentage Used)" "Mem" "$mem_info" \
    "Mem Usage" "$mem_usage" "Swap" "$swap_info"
  else
    # Printing the output (short ver.): Server Information
    printf "Server Information\n"; printf "%21s\n" | tr ' ' '-'
    printf "%-11s : %-10s\n" "OS" "$currentOS" "Uptime" "$uptime_now" "Location" "$country" "CPU" "$cpu_model" "Core" "$cpu_core @ $cpu_freq" \
    "AES-NI" "$cpu_aes" "VM-x/AMD-V" "$cpu_virt" "Virt" "$virt_type"
    echo

    # Printing the output (short ver.): Disk & Memory Usage
    printf "Disk & Memory Usage\n"; printf "%21s\n" | tr ' ' '-'
    printf "%-11s : %-10s\n" "Disk" "$disk_info" "Disk Usage" "$disk_usage ($disk_percentage Used)" "Mem" "$mem_info" \
    "Mem Usage" "$mem_usage" "Swap" "$swap_info"
  fi
  echo
}
disk_test() {
  [ "$arg_skip_disk" = "true" ] && return 1
  {
    $lsblk -nPpbo KNAME,SIZE,PKNAME,MOUNTPOINT,FSTYPE |
awk -F'="|" ?' -v OFS='|' '
    {
        kname = $2
        size = $4
        pkname = $6
        mountpoint = $8
        fstype = $10
    }
    pkname !~ "^/" { next }
    mountpoint !~ "^/" { next }
    size > sizes[pkname] {
        knames[pkname] = kname
        sizes[pkname] = size
        mountpoints[pkname] = mountpoint
        fstypes[pkname] = fstype
    }
    END {
        for (pkname in knames)
            print knames[pkname], sizes[pkname], mountpoints[pkname], fstypes[pkname]
    }
'
  } |
while IFS='|' read -r devname devsize devmp devtype; do
  mountpoint=$devmp
  disklimit=2000000000
  case "$arch" in
    *arm*|*aarch*)
    if [ "$devmp" = "/" ]; then
      disklimit=512000000
    fi
    ;;
  esac
  # Skip root partition
  [ "$mountpoint" = "/" ] && mountpoint=$benchy_path
  # Skip disk that has less then given limit
  if [ $devsize -lt $disklimit ]; then
    printf "%s\n" "Too little storage on $devname"
    continue
  fi
  if [ ! -w "$mountpoint" ]; then
    printf "%s\n" "No write permission to $mountpoint, skipping disk"
    continue
  fi
  # Run fio on each block size
  set -- "4k" "64k" "512k" "1m"
  for bs; do
    # Iterate over each defined block_size from array
    printf "%s" "Running fio R+W sampling on $bs block size..."
    fioutput=$(
    timeout 35 \
    $fio --name=rand_rw_$bs \
    --ioengine=libaio \
    --rw=randrw \
    --rwmixread=50 \
    --bs=$bs \
    --iodepth=64 \
    --numjobs=2 \
    --size=$fio_size \
    --runtime=30 \
    --gtod_reduce=1 \
    --direct=1 \
    --filename=$mountpoint/test.fio \
    --group_reporting \
    --minimal 2> /dev/null
    )
    [ "$?" -ne 0 ] && \
    fio_result="${fio_result}1|Failed|To|Bench|Disk|Please|Retry#" && overline && continue

    fio_iops_read=$(echo "$fioutput" | cut -d';' -f8)
    fio_iops_write=$(echo "$fioutput" | cut -d';' -f49)
    fio_iops=$(printf "%.1fk" "$(echo "scale=2 ; ($fio_iops_read + $fio_iops_write) / 1000" | $bc)")
    fio_iops_read=$(printf "%.1fk" "$(echo "scale=2 ; $fio_iops_read/ 1000" | $bc)")
    fio_iops_write=$(printf "%.1fk" "$(echo "scale=2 ; $fio_iops_write/ 1000" | $bc)")

    fio_test_read=$(echo "$fioutput" | cut -d';' -f7)
    fio_test_write=$(echo "$fioutput" | cut -d';' -f48)
    fio_test=$(format_disk "$(echo "($fio_test_read + $fio_test_write)" | $bc)")
    fio_test_read=$(format_disk $fio_test_read)
    fio_test_write=$(format_disk $fio_test_write)

    fio_result_temp="$bs|$fio_test_read|$fio_test_write|$fio_test|$fio_iops_read|$fio_iops_write|$fio_iops#"
    fio_result="${fio_result}${fio_result_temp}"
    overline
  done
  # Remove trailing hashtag
  fio_result="${fio_result%#}"
  fio_result=$(printf %s "$fio_result" | tr '#' '\n')

  # Build fio output
  printf "Disk Performance Check ($devtype on $devname):\n"
  printf "+%75s+\n" | tr ' ' '-'
  printf "| %-3s | %-11s | %-11s | %-11s | %18s %7s\n" "Size" "Read" "Write" "Total" "IOPS (R,W,T)" "|"
  printf "+%75s+\n" | tr ' ' '='
  echo "$fio_result" |
  {
    while IFS='|' read -r blocksize read write total read_iops write_iops total_iops; do
      # Loop over variable
      printf "| %-4s | %-11s | %-11s | %-11s | %-6s | %-6s | %-6s |\n" "$blocksize" "$read" "$write" "$total" "$read_iops" "$write_iops" "$total_iops"
    done
  }
  printf "+%75s+\n" | tr ' ' '-'
  unset fio_result
  echo
done
}

iperflist() {
  # iperf3 ipv4 provider list
  ipv4_provider=$(cat << 'EOF'
Clouvider|London, UK|5200-5209|lon.speedtest.clouvider.net
Airstream|Wisconsin, USA|5201-5205|iperf.airstreamcomm.net
Uztelecom|Tashkent, UZB|5200-5209|speedtest.uztelecom.uz
Online.net|Paris, FRA|5200-5209|ping.online.net
WebHorizon|Singapore, SG|9201-9205|iperf.sgp.webhorizon.in
EOF
)
  # iperf3 ipv6 provider list
  ipv6_provider=$(cat << 'EOF'
Clouvider|London, UK|5200-5209|lon.speedtest.clouvider.net
Airstream|Wisconsin, USA|5201-5205|iperf.airstreamcomm.net
Uztelecom|Tashkent, UZ|5200-5209|speedtest.uztelecom.uz
Online.net|Paris, FR|5200-5209|ping6.online.net
WebHorizon|Singapore, SG|9201-9205|iperf.sgp.webhorizon.in
EOF
)
}

runiperf() {
  # Define argument
  run_url="$1"
  run_port="$2"
  run_host="$3"
  run_flags="$4"

  # Send test 5 times
  sn=1
  while [ $sn -le 5 ]; do
    printf "%s" "Performing iperf3 send test to $run_host (Attempt #$sn of 5)"
    vport=$(shuf -i $run_port -n 1)
    iperflog=$(timeout 15 $iperf $run_flags -c $run_url -p $vport -P 6 2>/dev/null)
    if [ "$?" -eq 0 ]; then
      send_speed=$(echo "$iperflog" | awk '/SUM/ && /sender/{ print $6, $7 }')
      sleep 1 && overline && break
    else
      sleep 3 && overline
    fi
    sn=$(( sn + 1 ))
  done
  # Receive test 5 times
  rn=1
  while [ $rn -le 5 ]; do
    printf "%s" "Performing iperf3 receive test to $run_host (Attempt #$rn of 5)"
    vport=$(shuf -i $run_port -n 1)
    iperflog=$(timeout 15 $iperf $run_flags -c $run_url -p $vport -P 6 -R 2>/dev/null)
    if [ "$?" -eq 0 ]; then
      rec_speed=$(echo "$iperflog" | awk '/SUM/ && /receiver/{ print $6, $7 }')
      sleep 1 && overline && break
    else
      sleep 3 && overline
    fi
    rn=$(( rn + 1 ))
  done
}

iperf_header() {
  [ "$arg_skip_network" = "true" ] && return 1
  iperflist
  printf "Network Performance Test:\n"
  printf "+%86s+\n" | tr ' ' '-'
  printf "| %-5s | %-11s | %-15s | %-15s | %-15s | %-8s |\n" "Prot." "Provider" "Location" "Send" "Receive" "Latency"
  printf "+%86s+\n" | tr ' ' '='
}

parse_iperf() {
  # Internet Protocol Version 4 (IPv4) test
  if [ "$ipv4_status" = "true" ]; then
    iperf_flags="-4"
    prot="IPv4"
    echo "$ipv4_provider" |
    {
      while IFS='|' read -r provider loc port url; do
        runiperf $url $port $provider $iperf_flags
        case "$send_speed" in
          ""|*0.00*) send_speed="busy";;
        esac
        case "$rec_speed" in
          ""|*0.00*) rec_speed="busy";;
        esac
        # Latency test
        printf "%s" "Performing latency test to $provider (avg of 5)"
        latency=$(timeout 10 ping -qc5 $url 2>&1 | awk -F/ '/^rtt/ { printf "%.0f ms\n", $5 }')
        if [ -z "$latency" ]; then
          latency="busy"
        fi
        overline
        # End latency test
        printf "| %-5s | %-11s | %-15s | %-15s | %-15s | %-8s |\n" "$prot" "$provider" "$loc" "$send_speed" "$rec_speed" "$latency"
        unset send_speed rec_speed prot
      done
    }
    printf "+%86s+\n" | tr ' ' '-'
  fi

  # Internet Protocol Version 6 (IPv6) test
  if [ "$ipv6_status" = "true" ]; then
    iperf_flags="-6"
    prot="IPv6"
    echo "$ipv6_provider" |
    {
      while IFS='|' read -r provider loc port url; do
        runiperf $url $port $provider $iperf_flags
        case "$send_speed" in
          ""|*0.00*) send_speed="busy";;
        esac
        case "$rec_speed" in
          ""|*0.00*) rec_speed="busy";;
        esac
        # Latency test
        printf "%s" "Performing latency test to $provider (avg of 5)"
        latency=$(timeout 10 ping6 -qc5 $url 2>&1 | awk -F/ '/^rtt/ { printf "%.0f ms\n", $5 }')
        if [ -z "$latency" ]; then
          latency="busy"
        fi
        overline
        # End latency test
        printf "| %-5s | %-11s | %-15s | %-15s | %-15s | %-8s |\n" "$prot" "$provider" "$loc" "$send_speed" "$rec_speed" "$latency"
        unset send_speed rec_speed prot
      done
    }
    printf "+%86s+\n" | tr ' ' '-'
  fi
}
geekbench_test() {
  # Skip geekbench on input argument
  [ "$arg_skip_gb" = "true" ] && return 1
  # Exit if ipv6 only
  [ "$ipv4_status" = "false" ] && printf "%s\n" "Geekbench doesn't work over ipv6, exiting test.." && return 1
  if [ "$gb_version" -eq 5 ]; then
    # Geekbench 5
    if [ ! -f "$geekbench_path/geekbench5" ]; then
      printf "%s\n" "Downloading Geekbench 5, this may take a several minute..."
      file_grabber $gb_ddl_link | tar xzf - --strip-components=1 -C $geekbench_path \
      && printf "\r%s" "$(tput cuu 2; tput ed)"
    fi
    # Perform geekbench 5 test
    printf "%s" "Initializing geekbench 5 test..."
    gb_output=$($geekbench_path/geekbench5 --upload 2>/dev/null | grep -m 1 "https://browser")
    gb_var="div"
    overline
  elif [ "$gb_version" -eq 4 ]; then
    # Geekbench 4
    if [ ! -f "$geekbench_path/geekbench4" ]; then
      printf "%s\n" "Downloading Geekbench 4, this may take a several minute..."
      file_grabber $gb_ddl_link | tar xzf - --strip-components=1 -C $geekbench_path \
      && printf "\r%s" "$(tput cuu 2; tput ed)"
    fi
    # Perform geekbench 4 test
    printf "%s" "Initializing geekbench 4 test..."
    gb_output=$($geekbench_path/geekbench_${gb_arch} --upload 2>/dev/null | grep -m 1 "https://browser")
    gb_var="span"
    overline
  fi
  # Parsing result
  if [ -n "$gb_output" ]; then
    gb_output="${gb_output#"${gb_output%%[![:space:]]*}"}" # Remove whitespace
    gb_output="${gb_output%"${gb_output##*[![:space:]]}"}" # Remove whitespace
    gbfile="$benchy_path/temp_gb${gb_version}.log"
    file_grabber $gb_output $gbfile
    gb_single_core=$(awk -F "<${gb_var}[^>]*>(<d>)?|(</?d>)?</${gb_var}>" '$2~/[0-9]/{print $2}' "$gbfile" | awk 'FNR==1')
    gb_multi_core=$(awk -F "<${gb_var}[^>]*>(<d>)?|(</?d>)?</${gb_var}>" '$2~/[0-9]/{print $2}' "$gbfile" | awk 'FNR==2')
    gb_string=$(gb_string "$gbfile")
    printf "+%47s+\n" | tr ' ' '-'
    printf "| %-32s |\n" "$gb_string"
    printf "+%47s+\n" | tr ' ' '='
    printf "| %-25s | %-17s |\n" "Single Core" "$gb_single_core"
    printf "| %-25s | %-17s |\n" "Multi Core" "$gb_multi_core"
    printf "+%47s+\n" | tr ' ' '-'
    printf "| %-32s |\n" "$gb_output"
    printf "+%47s+\n" | tr ' ' '-'
    rm -f "$gbfile"
  else
    printf "%s\n" "Geekbench $gb_version run failed, please retry again"
    return 1
  fi
}

main() {
  core_pkg
  tput civis
  header_intro
  user_arch
  binarycheck
  sysinfo
  disk_test
  if iperf_header; then
    parse_iperf && echo
  fi
  geekbench_test
  [ "$arg_temp_file" = "true" ] && rm -fr -- "$benchy_path"
}
main
